https://youtu.be/dIUOWdwwZBw?si=UG05V7bAmWUUu_z9
::before and ::after
content: '';      **is required in each element
Can be used for gradient borders
EX1: (gradient underline)
  h1{ position: relative; width: max-content; }
  h1::after{ content: ''; background: linear-gradient(to right, red, blue); border-radius: 100px; height: 4px; width: 100%; position: absolute; bottom: 0; left: 0; transition: 100ms; }
  h1:hover::after{ width: 0; }
EX2: (redesigned bullet points)
EX3: (gradient button that changes color when the mouse is over it)

https://www.youtube.com/watch?v=PTVXnOrQoBQ
Gradient Border
Create a simple button in HTML:      EX: <body> <button>Gradient Button</button> </body>
In CSS:      body{ background-color: #0b0d10; min-height: 100vh; display: flex; justify-content: center; align-items: center; }
             button( padding: 1em 2em; background-color: #161a20; border: none; color: #f0f0f0; border-radius: 1000px; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; position: relative;  display: flex; justify-content: center; align-items: center; }
             button::after{ content: ''; position: absolute; height: 107%; width: 102%; border-radius: 1000px; background-image: linear-gradient(to bottom right, #008cff, #e100ff); z-index: -1; }
    **z-index moves the pseudo-element behind the button, sizes adjusted for pseudo-element to appear as a border
             button:hover{ z-index: 0; box-shadow: 40px 0 100px #008cff, -40px 0 100px #e100ff; }
    **z-index set to 0 pushes the pseudo-element back to the foreground filling the button with the gradient, opacity of shadows can be reduced

https://youtu.be/Suu1l_3YNVM?si=OETKo6JezplEBvCx
CSS Loading Animations Effects
In HTML:    <body><section>
                    <div class="loader"> <p>Loading...</p> <span style="--i:1"></span><span style="--i:2"></span>(ETC: repeat all the way to [style="--i:20"])  </div>
                  </section></body>
In CSS:   * { margin: 0; padding: 0; box-sizing: border-box; font-family: consolas; }
          section { display: flex; justify-content: center; align-items: center; min-height: 100vh; background: #001f25; }
          .loader { position: relative; width: 200px; height: 200px; display: flex; justify-content: center; align-items: center; }
          .loader p { font-size: 1.8em; color: #00efff; text-shadow: 0 0 20px #00efff, 0 0 40px #00efff, 0 0 80px #00efff; }
          .loader span { position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: 2px solid #fff; transform: rotate(calc(18deg * var(--i))); }
          /* 360 / 20 = 18 (20 is for the number of spans in the html part)(this is where the 18deg comes from in the above transform) */
          .loader span::before { content: ''; position: absolute; top: 0; left: 0; width: 30px; height: 30px; border-radius: 50%; background: #00efff; box-shadow: 0 0 20px #00efff, 0 0 40px #00efff, 0 0 80px #00efff, 0 0 160px #00efff;
            animation: animate 1s linear infinite; animation-delay: calc(-0.1s * var(--i)); }   /* changing the number of s in the animation-delay calc() changes how the glowing dots circle ex: try -0.1s, -0.2s, -0.05s, etc. */
          @keyframes animate { 0% { transform: scale(1); } 80%,100% { transform: scale(0); } }
